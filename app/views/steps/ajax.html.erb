<h1 class="page-header">AJAX</h1>

<blockquote>
  <p>AJAX or Asynchronous JavaScript refers to sending data to, and retrieve data from, a server in the background without interfering with the display and behavior of the existing page.</p>
</blockquote>

<h2>Goals</h2>
<blockquote>
  <ul>
    <li>Give our comment form asynchronous features.</li>
    <li>Respond to different formats</li>
    <li>Use our new Notification class to give feedback</li>
  </ul>
</blockquote>

<h3>Step 1</h3>
<blockquote>
  <p>Rails <code>form_for</code> takes a <code>remote</code> argument so the form will be submitted by Ajax rather than by the browser's normal submit mechanism.</p>
  <pre><code>remote: true</code></pre>
  <div class="alert alert-info">Notice the <code>data-remote="true"</code> attribute added to the form.</div>
</blockquote>

<h3>Step 2</h3>
<blockquote>
  <p>Ajax isn't just client-side, you also need to do some work on the server side to support it.</p>
  <pre><code>if @comment.save
  respond_to do |format|
    @message = 'Comment was successfully posted.'
    format.html { redirect_to @project, notice: @message }
    format.js { @message_type = 'notice' }
  end
else
  respond_to do |format|
    @message = @comment.errors.full_messages.join('. ')
    format.html { redirect_to @project, alert: @message }
    format.js { @message_type = 'alert' }
  end
end</code></pre>
</blockquote>

<h3>Step 3</h3>
<blockquote>
  <p>Display notifications from <code>create.js.erb</code></p>
  <pre><code>new Notification("&lt;%= @message %&gt;", "&lt;%= @message_type %&gt;");</code></pre>
</blockquote>

<h3>Step 4</h3>
<blockquote>
  <p>Add newly created comment to the list</p>
  <pre><code>&lt;% if @comment.valid? %&gt;
  $("&lt;%= escape_javascript(render @comment) %&gt;").prependTo(".comments");
&lt;% end %&gt;
new Notification("&lt;%= @message %&gt;", "&lt;%= @message_type %&gt;");</code></pre>
</blockquote>

<h3>Step 5</h3>
<blockquote>
  <p>Reset the form</p>
  <pre><code>&lt;% if @comment.valid? %&gt;
  $("&lt;%= escape_javascript(render @comment) %&gt;").prependTo(".comments");
  $('#new_comment')[0].reset()
&lt;% end %&gt;
new Notification("&lt;%= @message %&gt;", "&lt;%= @message_type %&gt;");</code></pre>
</blockquote>

<h2>Explanation</h2>
<blockquote>
  <p>So what happened?</p>
  <ul>
    <li><a href="https://github.com/rails/jquery-ujs">jQuery-ujs</a> intercepts the call to submit the form and sends a request to the server asynchronously.</li>
    <li>Rails responds to the call normally until the <code>respond_to</code> block.</li>
    <li>Rails returns a javascript response to the browser instead of the HTML default one.</li>
    <li>Browser executes the javascript response.</li>
  </ul>
</blockquote>